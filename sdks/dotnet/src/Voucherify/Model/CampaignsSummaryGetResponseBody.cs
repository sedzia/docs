/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CampaignsSummaryGetResponseBody
    /// </summary>
    [DataContract(Name = "CampaignsSummaryGetResponseBody")]
    public partial class CampaignsSummaryGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of the object, which is &#x60;campaign_summary&#x60;.
        /// </summary>
        /// <value>The type of the object, which is &#x60;campaign_summary&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum CampaignSummary for value: campaign_summary
            /// </summary>
            [EnumMember(Value = "campaign_summary")]
            CampaignSummary = 1
        }


        /// <summary>
        /// The type of the object, which is &#x60;campaign_summary&#x60;.
        /// </summary>
        /// <value>The type of the object, which is &#x60;campaign_summary&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsSummaryGetResponseBody" /> class.
        /// </summary>
        /// <param name="varObject">The type of the object, which is &#x60;campaign_summary&#x60;..</param>
        /// <param name="campaign">campaign.</param>
        /// <param name="redemptions">Total number of redemptions, which includes successful and failed redemptions..</param>
        /// <param name="redemptionsSucceeded">Total number of successful redemptions..</param>
        /// <param name="redemptionsFailed">Total number of failed redemptions..</param>
        /// <param name="rollbacks">Total number of rollbacks, which includes successful and failed rollbacks..</param>
        /// <param name="rollbacksSucceeded">Total number of successful rollbacks..</param>
        /// <param name="rollbacksFailed">Total number of failed rollbacks..</param>
        /// <param name="validations">Total number of validations, which includes successful and failed validations..</param>
        /// <param name="validationsSucceeded">Total number of successful validations..</param>
        /// <param name="validationsFailed">Total number of failed validations..</param>
        /// <param name="ordersAmount">Total amount of orders related to the campaign. This amount is not reduced by &#x60;orders_rolledback_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="ordersRolledbackAmount">Total amount of orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="vouchersCreated">Total number of vouchers created within the campaign. Includes vouchers generated when the campaign was created, vouchers added manually, or vouchers generated automatically when a new customer joined the campaign..</param>
        /// <param name="vouchersDeleted">Total number of vouchers deleted within the campaign. Includes vouchers moved to the bin and vouchers deleted permanently. Vouchers moved to the bin and then deleted permanently are counted once..</param>
        /// <param name="publications">Total number of publications, which includes successful and failed publications..</param>
        /// <param name="publicationsSucceeded">Total number of successful publications..</param>
        /// <param name="publicationsFailed">Total number of failed publications..</param>
        /// <param name="discountedAmount">Total amount of discounts related to the campaign. This amount is not reduced by the &#x60;rolledback_discounted_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="rolledbackDiscountedAmount">Total amount of discounts orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="createdVouchersAmount">The total credit amount for all created gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="amountAdded">The total credit amount that was added. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="amountDeleted">The total credit amount that was deleted by deleting gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="amountRedeemed">The total credit amount that was redeemed. This amount is not reduced by the &#x60;amount_rolledback&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="amountRolledback">The total credit amount that was rolled back. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="amountSubtracted">The total credit amount that was subtracted. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;..</param>
        /// <param name="createdVouchersPoints">Total number of points added to newly created loyalty cards. This also counts points added for the loyalty cards which are created by importing a CSV file to a campaign..</param>
        /// <param name="pointsDeleted">Total number of points that were deleted..</param>
        /// <param name="pointsSubtracted">Total number of points that were subtracted..</param>
        /// <param name="pointsAdded">Total number of points that were added. This includes points added manually or automatically by redeeming a reward that adds loyalty points to cards in this campaign..</param>
        /// <param name="pointsRewarded">Total number of points that were rewarded to loyalty cards through earning rules. This includes pending points that were activated..</param>
        /// <param name="pointsRedeemed">Total number of points that were redeemed for rewards..</param>
        /// <param name="pointsRolledback">Total number of points that were rolled back for reward redemptions..</param>
        /// <param name="pointsExpired">Total number of points that have expired..</param>
        /// <param name="pointsTransferredOut">Total number of points transferred out of loyalty cards covered by the campaign..</param>
        /// <param name="pointsTransferredIn">Total number of points transferred into loyalty cards covered by the campaign..</param>
        /// <param name="pendingPointsAdded">Total number of pending points that were added either as part of earning rules or added manually to an existing pending point bucket. Pending points that were activated manually or automatically or that were canceled do not affect this number..</param>
        /// <param name="pendingPointsSubtracted">Total number of pending points that were subtracted from existing pending point buckets..</param>
        /// <param name="pendingPointsActivated">Total number of pending points that were activated manually or automatically..</param>
        /// <param name="pendingPointsCanceled">Total number of pending points that were canceled..</param>
        /// <param name="referredCustomers">Total number of all referred customers..</param>
        public CampaignsSummaryGetResponseBody(ObjectEnum? varObject = default(ObjectEnum?), CampaignBase campaign = default(CampaignBase), int? redemptions = default(int?), int? redemptionsSucceeded = default(int?), int? redemptionsFailed = default(int?), int? rollbacks = default(int?), int? rollbacksSucceeded = default(int?), int? rollbacksFailed = default(int?), int? validations = default(int?), int? validationsSucceeded = default(int?), int? validationsFailed = default(int?), int? ordersAmount = default(int?), int? ordersRolledbackAmount = default(int?), int? vouchersCreated = default(int?), int? vouchersDeleted = default(int?), int? publications = default(int?), int? publicationsSucceeded = default(int?), int? publicationsFailed = default(int?), int? discountedAmount = default(int?), int? rolledbackDiscountedAmount = default(int?), int? createdVouchersAmount = default(int?), int? amountAdded = default(int?), int? amountDeleted = default(int?), int? amountRedeemed = default(int?), int? amountRolledback = default(int?), int? amountSubtracted = default(int?), int? createdVouchersPoints = default(int?), int? pointsDeleted = default(int?), int? pointsSubtracted = default(int?), int? pointsAdded = default(int?), int? pointsRewarded = default(int?), int? pointsRedeemed = default(int?), int? pointsRolledback = default(int?), int? pointsExpired = default(int?), int? pointsTransferredOut = default(int?), int? pointsTransferredIn = default(int?), int? pendingPointsAdded = default(int?), int? pendingPointsSubtracted = default(int?), int? pendingPointsActivated = default(int?), int? pendingPointsCanceled = default(int?), int? referredCustomers = default(int?))
        {
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Campaign = campaign;
            if (this.Campaign != null)
            {
                this._flagCampaign = true;
            }
            this._Redemptions = redemptions;
            if (this.Redemptions != null)
            {
                this._flagRedemptions = true;
            }
            this._RedemptionsSucceeded = redemptionsSucceeded;
            if (this.RedemptionsSucceeded != null)
            {
                this._flagRedemptionsSucceeded = true;
            }
            this._RedemptionsFailed = redemptionsFailed;
            if (this.RedemptionsFailed != null)
            {
                this._flagRedemptionsFailed = true;
            }
            this._Rollbacks = rollbacks;
            if (this.Rollbacks != null)
            {
                this._flagRollbacks = true;
            }
            this._RollbacksSucceeded = rollbacksSucceeded;
            if (this.RollbacksSucceeded != null)
            {
                this._flagRollbacksSucceeded = true;
            }
            this._RollbacksFailed = rollbacksFailed;
            if (this.RollbacksFailed != null)
            {
                this._flagRollbacksFailed = true;
            }
            this._Validations = validations;
            if (this.Validations != null)
            {
                this._flagValidations = true;
            }
            this._ValidationsSucceeded = validationsSucceeded;
            if (this.ValidationsSucceeded != null)
            {
                this._flagValidationsSucceeded = true;
            }
            this._ValidationsFailed = validationsFailed;
            if (this.ValidationsFailed != null)
            {
                this._flagValidationsFailed = true;
            }
            this._OrdersAmount = ordersAmount;
            if (this.OrdersAmount != null)
            {
                this._flagOrdersAmount = true;
            }
            this._OrdersRolledbackAmount = ordersRolledbackAmount;
            if (this.OrdersRolledbackAmount != null)
            {
                this._flagOrdersRolledbackAmount = true;
            }
            this._VouchersCreated = vouchersCreated;
            if (this.VouchersCreated != null)
            {
                this._flagVouchersCreated = true;
            }
            this._VouchersDeleted = vouchersDeleted;
            if (this.VouchersDeleted != null)
            {
                this._flagVouchersDeleted = true;
            }
            this._Publications = publications;
            if (this.Publications != null)
            {
                this._flagPublications = true;
            }
            this._PublicationsSucceeded = publicationsSucceeded;
            if (this.PublicationsSucceeded != null)
            {
                this._flagPublicationsSucceeded = true;
            }
            this._PublicationsFailed = publicationsFailed;
            if (this.PublicationsFailed != null)
            {
                this._flagPublicationsFailed = true;
            }
            this._DiscountedAmount = discountedAmount;
            if (this.DiscountedAmount != null)
            {
                this._flagDiscountedAmount = true;
            }
            this._RolledbackDiscountedAmount = rolledbackDiscountedAmount;
            if (this.RolledbackDiscountedAmount != null)
            {
                this._flagRolledbackDiscountedAmount = true;
            }
            this._CreatedVouchersAmount = createdVouchersAmount;
            if (this.CreatedVouchersAmount != null)
            {
                this._flagCreatedVouchersAmount = true;
            }
            this._AmountAdded = amountAdded;
            if (this.AmountAdded != null)
            {
                this._flagAmountAdded = true;
            }
            this._AmountDeleted = amountDeleted;
            if (this.AmountDeleted != null)
            {
                this._flagAmountDeleted = true;
            }
            this._AmountRedeemed = amountRedeemed;
            if (this.AmountRedeemed != null)
            {
                this._flagAmountRedeemed = true;
            }
            this._AmountRolledback = amountRolledback;
            if (this.AmountRolledback != null)
            {
                this._flagAmountRolledback = true;
            }
            this._AmountSubtracted = amountSubtracted;
            if (this.AmountSubtracted != null)
            {
                this._flagAmountSubtracted = true;
            }
            this._CreatedVouchersPoints = createdVouchersPoints;
            if (this.CreatedVouchersPoints != null)
            {
                this._flagCreatedVouchersPoints = true;
            }
            this._PointsDeleted = pointsDeleted;
            if (this.PointsDeleted != null)
            {
                this._flagPointsDeleted = true;
            }
            this._PointsSubtracted = pointsSubtracted;
            if (this.PointsSubtracted != null)
            {
                this._flagPointsSubtracted = true;
            }
            this._PointsAdded = pointsAdded;
            if (this.PointsAdded != null)
            {
                this._flagPointsAdded = true;
            }
            this._PointsRewarded = pointsRewarded;
            if (this.PointsRewarded != null)
            {
                this._flagPointsRewarded = true;
            }
            this._PointsRedeemed = pointsRedeemed;
            if (this.PointsRedeemed != null)
            {
                this._flagPointsRedeemed = true;
            }
            this._PointsRolledback = pointsRolledback;
            if (this.PointsRolledback != null)
            {
                this._flagPointsRolledback = true;
            }
            this._PointsExpired = pointsExpired;
            if (this.PointsExpired != null)
            {
                this._flagPointsExpired = true;
            }
            this._PointsTransferredOut = pointsTransferredOut;
            if (this.PointsTransferredOut != null)
            {
                this._flagPointsTransferredOut = true;
            }
            this._PointsTransferredIn = pointsTransferredIn;
            if (this.PointsTransferredIn != null)
            {
                this._flagPointsTransferredIn = true;
            }
            this._PendingPointsAdded = pendingPointsAdded;
            if (this.PendingPointsAdded != null)
            {
                this._flagPendingPointsAdded = true;
            }
            this._PendingPointsSubtracted = pendingPointsSubtracted;
            if (this.PendingPointsSubtracted != null)
            {
                this._flagPendingPointsSubtracted = true;
            }
            this._PendingPointsActivated = pendingPointsActivated;
            if (this.PendingPointsActivated != null)
            {
                this._flagPendingPointsActivated = true;
            }
            this._PendingPointsCanceled = pendingPointsCanceled;
            if (this.PendingPointsCanceled != null)
            {
                this._flagPendingPointsCanceled = true;
            }
            this._ReferredCustomers = referredCustomers;
            if (this.ReferredCustomers != null)
            {
                this._flagReferredCustomers = true;
            }
        }

        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name = "campaign", EmitDefaultValue = true)]
        public CampaignBase Campaign
        {
            get{ return _Campaign;}
            set
            {
                _Campaign = value;
                _flagCampaign = true;
            }
        }
        private CampaignBase _Campaign;
        private bool _flagCampaign;

        /// <summary>
        /// Returns false as Campaign should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaign()
        {
            return _flagCampaign;
        }
        /// <summary>
        /// Total number of redemptions, which includes successful and failed redemptions.
        /// </summary>
        /// <value>Total number of redemptions, which includes successful and failed redemptions.</value>
        [DataMember(Name = "redemptions", EmitDefaultValue = true)]
        public int? Redemptions
        {
            get{ return _Redemptions;}
            set
            {
                _Redemptions = value;
                _flagRedemptions = true;
            }
        }
        private int? _Redemptions;
        private bool _flagRedemptions;

        /// <summary>
        /// Returns false as Redemptions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptions()
        {
            return _flagRedemptions;
        }
        /// <summary>
        /// Total number of successful redemptions.
        /// </summary>
        /// <value>Total number of successful redemptions.</value>
        [DataMember(Name = "redemptions_succeeded", EmitDefaultValue = true)]
        public int? RedemptionsSucceeded
        {
            get{ return _RedemptionsSucceeded;}
            set
            {
                _RedemptionsSucceeded = value;
                _flagRedemptionsSucceeded = true;
            }
        }
        private int? _RedemptionsSucceeded;
        private bool _flagRedemptionsSucceeded;

        /// <summary>
        /// Returns false as RedemptionsSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptionsSucceeded()
        {
            return _flagRedemptionsSucceeded;
        }
        /// <summary>
        /// Total number of failed redemptions.
        /// </summary>
        /// <value>Total number of failed redemptions.</value>
        [DataMember(Name = "redemptions_failed", EmitDefaultValue = true)]
        public int? RedemptionsFailed
        {
            get{ return _RedemptionsFailed;}
            set
            {
                _RedemptionsFailed = value;
                _flagRedemptionsFailed = true;
            }
        }
        private int? _RedemptionsFailed;
        private bool _flagRedemptionsFailed;

        /// <summary>
        /// Returns false as RedemptionsFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptionsFailed()
        {
            return _flagRedemptionsFailed;
        }
        /// <summary>
        /// Total number of rollbacks, which includes successful and failed rollbacks.
        /// </summary>
        /// <value>Total number of rollbacks, which includes successful and failed rollbacks.</value>
        [DataMember(Name = "rollbacks", EmitDefaultValue = true)]
        public int? Rollbacks
        {
            get{ return _Rollbacks;}
            set
            {
                _Rollbacks = value;
                _flagRollbacks = true;
            }
        }
        private int? _Rollbacks;
        private bool _flagRollbacks;

        /// <summary>
        /// Returns false as Rollbacks should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbacks()
        {
            return _flagRollbacks;
        }
        /// <summary>
        /// Total number of successful rollbacks.
        /// </summary>
        /// <value>Total number of successful rollbacks.</value>
        [DataMember(Name = "rollbacks_succeeded", EmitDefaultValue = true)]
        public int? RollbacksSucceeded
        {
            get{ return _RollbacksSucceeded;}
            set
            {
                _RollbacksSucceeded = value;
                _flagRollbacksSucceeded = true;
            }
        }
        private int? _RollbacksSucceeded;
        private bool _flagRollbacksSucceeded;

        /// <summary>
        /// Returns false as RollbacksSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbacksSucceeded()
        {
            return _flagRollbacksSucceeded;
        }
        /// <summary>
        /// Total number of failed rollbacks.
        /// </summary>
        /// <value>Total number of failed rollbacks.</value>
        [DataMember(Name = "rollbacks_failed", EmitDefaultValue = true)]
        public int? RollbacksFailed
        {
            get{ return _RollbacksFailed;}
            set
            {
                _RollbacksFailed = value;
                _flagRollbacksFailed = true;
            }
        }
        private int? _RollbacksFailed;
        private bool _flagRollbacksFailed;

        /// <summary>
        /// Returns false as RollbacksFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbacksFailed()
        {
            return _flagRollbacksFailed;
        }
        /// <summary>
        /// Total number of validations, which includes successful and failed validations.
        /// </summary>
        /// <value>Total number of validations, which includes successful and failed validations.</value>
        [DataMember(Name = "validations", EmitDefaultValue = true)]
        public int? Validations
        {
            get{ return _Validations;}
            set
            {
                _Validations = value;
                _flagValidations = true;
            }
        }
        private int? _Validations;
        private bool _flagValidations;

        /// <summary>
        /// Returns false as Validations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidations()
        {
            return _flagValidations;
        }
        /// <summary>
        /// Total number of successful validations.
        /// </summary>
        /// <value>Total number of successful validations.</value>
        [DataMember(Name = "validations_succeeded", EmitDefaultValue = true)]
        public int? ValidationsSucceeded
        {
            get{ return _ValidationsSucceeded;}
            set
            {
                _ValidationsSucceeded = value;
                _flagValidationsSucceeded = true;
            }
        }
        private int? _ValidationsSucceeded;
        private bool _flagValidationsSucceeded;

        /// <summary>
        /// Returns false as ValidationsSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationsSucceeded()
        {
            return _flagValidationsSucceeded;
        }
        /// <summary>
        /// Total number of failed validations.
        /// </summary>
        /// <value>Total number of failed validations.</value>
        [DataMember(Name = "validations_failed", EmitDefaultValue = true)]
        public int? ValidationsFailed
        {
            get{ return _ValidationsFailed;}
            set
            {
                _ValidationsFailed = value;
                _flagValidationsFailed = true;
            }
        }
        private int? _ValidationsFailed;
        private bool _flagValidationsFailed;

        /// <summary>
        /// Returns false as ValidationsFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationsFailed()
        {
            return _flagValidationsFailed;
        }
        /// <summary>
        /// Total amount of orders related to the campaign. This amount is not reduced by &#x60;orders_rolledback_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>Total amount of orders related to the campaign. This amount is not reduced by &#x60;orders_rolledback_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "orders_amount", EmitDefaultValue = true)]
        public int? OrdersAmount
        {
            get{ return _OrdersAmount;}
            set
            {
                _OrdersAmount = value;
                _flagOrdersAmount = true;
            }
        }
        private int? _OrdersAmount;
        private bool _flagOrdersAmount;

        /// <summary>
        /// Returns false as OrdersAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrdersAmount()
        {
            return _flagOrdersAmount;
        }
        /// <summary>
        /// Total amount of orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>Total amount of orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "orders_rolledback_amount", EmitDefaultValue = true)]
        public int? OrdersRolledbackAmount
        {
            get{ return _OrdersRolledbackAmount;}
            set
            {
                _OrdersRolledbackAmount = value;
                _flagOrdersRolledbackAmount = true;
            }
        }
        private int? _OrdersRolledbackAmount;
        private bool _flagOrdersRolledbackAmount;

        /// <summary>
        /// Returns false as OrdersRolledbackAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrdersRolledbackAmount()
        {
            return _flagOrdersRolledbackAmount;
        }
        /// <summary>
        /// Total number of vouchers created within the campaign. Includes vouchers generated when the campaign was created, vouchers added manually, or vouchers generated automatically when a new customer joined the campaign.
        /// </summary>
        /// <value>Total number of vouchers created within the campaign. Includes vouchers generated when the campaign was created, vouchers added manually, or vouchers generated automatically when a new customer joined the campaign.</value>
        [DataMember(Name = "vouchers_created", EmitDefaultValue = true)]
        public int? VouchersCreated
        {
            get{ return _VouchersCreated;}
            set
            {
                _VouchersCreated = value;
                _flagVouchersCreated = true;
            }
        }
        private int? _VouchersCreated;
        private bool _flagVouchersCreated;

        /// <summary>
        /// Returns false as VouchersCreated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchersCreated()
        {
            return _flagVouchersCreated;
        }
        /// <summary>
        /// Total number of vouchers deleted within the campaign. Includes vouchers moved to the bin and vouchers deleted permanently. Vouchers moved to the bin and then deleted permanently are counted once.
        /// </summary>
        /// <value>Total number of vouchers deleted within the campaign. Includes vouchers moved to the bin and vouchers deleted permanently. Vouchers moved to the bin and then deleted permanently are counted once.</value>
        [DataMember(Name = "vouchers_deleted", EmitDefaultValue = true)]
        public int? VouchersDeleted
        {
            get{ return _VouchersDeleted;}
            set
            {
                _VouchersDeleted = value;
                _flagVouchersDeleted = true;
            }
        }
        private int? _VouchersDeleted;
        private bool _flagVouchersDeleted;

        /// <summary>
        /// Returns false as VouchersDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchersDeleted()
        {
            return _flagVouchersDeleted;
        }
        /// <summary>
        /// Total number of publications, which includes successful and failed publications.
        /// </summary>
        /// <value>Total number of publications, which includes successful and failed publications.</value>
        [DataMember(Name = "publications", EmitDefaultValue = true)]
        public int? Publications
        {
            get{ return _Publications;}
            set
            {
                _Publications = value;
                _flagPublications = true;
            }
        }
        private int? _Publications;
        private bool _flagPublications;

        /// <summary>
        /// Returns false as Publications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePublications()
        {
            return _flagPublications;
        }
        /// <summary>
        /// Total number of successful publications.
        /// </summary>
        /// <value>Total number of successful publications.</value>
        [DataMember(Name = "publications_succeeded", EmitDefaultValue = true)]
        public int? PublicationsSucceeded
        {
            get{ return _PublicationsSucceeded;}
            set
            {
                _PublicationsSucceeded = value;
                _flagPublicationsSucceeded = true;
            }
        }
        private int? _PublicationsSucceeded;
        private bool _flagPublicationsSucceeded;

        /// <summary>
        /// Returns false as PublicationsSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePublicationsSucceeded()
        {
            return _flagPublicationsSucceeded;
        }
        /// <summary>
        /// Total number of failed publications.
        /// </summary>
        /// <value>Total number of failed publications.</value>
        [DataMember(Name = "publications_failed", EmitDefaultValue = true)]
        public int? PublicationsFailed
        {
            get{ return _PublicationsFailed;}
            set
            {
                _PublicationsFailed = value;
                _flagPublicationsFailed = true;
            }
        }
        private int? _PublicationsFailed;
        private bool _flagPublicationsFailed;

        /// <summary>
        /// Returns false as PublicationsFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePublicationsFailed()
        {
            return _flagPublicationsFailed;
        }
        /// <summary>
        /// Total amount of discounts related to the campaign. This amount is not reduced by the &#x60;rolledback_discounted_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>Total amount of discounts related to the campaign. This amount is not reduced by the &#x60;rolledback_discounted_amount&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "discounted_amount", EmitDefaultValue = true)]
        public int? DiscountedAmount
        {
            get{ return _DiscountedAmount;}
            set
            {
                _DiscountedAmount = value;
                _flagDiscountedAmount = true;
            }
        }
        private int? _DiscountedAmount;
        private bool _flagDiscountedAmount;

        /// <summary>
        /// Returns false as DiscountedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountedAmount()
        {
            return _flagDiscountedAmount;
        }
        /// <summary>
        /// Total amount of discounts orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>Total amount of discounts orders that were rolled back and are related to the campaign. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "rolledback_discounted_amount", EmitDefaultValue = true)]
        public int? RolledbackDiscountedAmount
        {
            get{ return _RolledbackDiscountedAmount;}
            set
            {
                _RolledbackDiscountedAmount = value;
                _flagRolledbackDiscountedAmount = true;
            }
        }
        private int? _RolledbackDiscountedAmount;
        private bool _flagRolledbackDiscountedAmount;

        /// <summary>
        /// Returns false as RolledbackDiscountedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRolledbackDiscountedAmount()
        {
            return _flagRolledbackDiscountedAmount;
        }
        /// <summary>
        /// The total credit amount for all created gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount for all created gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "created_vouchers_amount", EmitDefaultValue = true)]
        public int? CreatedVouchersAmount
        {
            get{ return _CreatedVouchersAmount;}
            set
            {
                _CreatedVouchersAmount = value;
                _flagCreatedVouchersAmount = true;
            }
        }
        private int? _CreatedVouchersAmount;
        private bool _flagCreatedVouchersAmount;

        /// <summary>
        /// Returns false as CreatedVouchersAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedVouchersAmount()
        {
            return _flagCreatedVouchersAmount;
        }
        /// <summary>
        /// The total credit amount that was added. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount that was added. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "amount_added", EmitDefaultValue = true)]
        public int? AmountAdded
        {
            get{ return _AmountAdded;}
            set
            {
                _AmountAdded = value;
                _flagAmountAdded = true;
            }
        }
        private int? _AmountAdded;
        private bool _flagAmountAdded;

        /// <summary>
        /// Returns false as AmountAdded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountAdded()
        {
            return _flagAmountAdded;
        }
        /// <summary>
        /// The total credit amount that was deleted by deleting gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount that was deleted by deleting gift cards. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "amount_deleted", EmitDefaultValue = true)]
        public int? AmountDeleted
        {
            get{ return _AmountDeleted;}
            set
            {
                _AmountDeleted = value;
                _flagAmountDeleted = true;
            }
        }
        private int? _AmountDeleted;
        private bool _flagAmountDeleted;

        /// <summary>
        /// Returns false as AmountDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDeleted()
        {
            return _flagAmountDeleted;
        }
        /// <summary>
        /// The total credit amount that was redeemed. This amount is not reduced by the &#x60;amount_rolledback&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount that was redeemed. This amount is not reduced by the &#x60;amount_rolledback&#x60;. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "amount_redeemed", EmitDefaultValue = true)]
        public int? AmountRedeemed
        {
            get{ return _AmountRedeemed;}
            set
            {
                _AmountRedeemed = value;
                _flagAmountRedeemed = true;
            }
        }
        private int? _AmountRedeemed;
        private bool _flagAmountRedeemed;

        /// <summary>
        /// Returns false as AmountRedeemed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRedeemed()
        {
            return _flagAmountRedeemed;
        }
        /// <summary>
        /// The total credit amount that was rolled back. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount that was rolled back. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "amount_rolledback", EmitDefaultValue = true)]
        public int? AmountRolledback
        {
            get{ return _AmountRolledback;}
            set
            {
                _AmountRolledback = value;
                _flagAmountRolledback = true;
            }
        }
        private int? _AmountRolledback;
        private bool _flagAmountRolledback;

        /// <summary>
        /// Returns false as AmountRolledback should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRolledback()
        {
            return _flagAmountRolledback;
        }
        /// <summary>
        /// The total credit amount that was subtracted. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.
        /// </summary>
        /// <value>The total credit amount that was subtracted. The value is multiplied by &#x60;100&#x60; to precisely represent 2 decimal places. For example, &#x60;$10&#x60; is represented as &#x60;1000&#x60;.</value>
        [DataMember(Name = "amount_subtracted", EmitDefaultValue = true)]
        public int? AmountSubtracted
        {
            get{ return _AmountSubtracted;}
            set
            {
                _AmountSubtracted = value;
                _flagAmountSubtracted = true;
            }
        }
        private int? _AmountSubtracted;
        private bool _flagAmountSubtracted;

        /// <summary>
        /// Returns false as AmountSubtracted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountSubtracted()
        {
            return _flagAmountSubtracted;
        }
        /// <summary>
        /// Total number of points added to newly created loyalty cards. This also counts points added for the loyalty cards which are created by importing a CSV file to a campaign.
        /// </summary>
        /// <value>Total number of points added to newly created loyalty cards. This also counts points added for the loyalty cards which are created by importing a CSV file to a campaign.</value>
        [DataMember(Name = "created_vouchers_points", EmitDefaultValue = true)]
        public int? CreatedVouchersPoints
        {
            get{ return _CreatedVouchersPoints;}
            set
            {
                _CreatedVouchersPoints = value;
                _flagCreatedVouchersPoints = true;
            }
        }
        private int? _CreatedVouchersPoints;
        private bool _flagCreatedVouchersPoints;

        /// <summary>
        /// Returns false as CreatedVouchersPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedVouchersPoints()
        {
            return _flagCreatedVouchersPoints;
        }
        /// <summary>
        /// Total number of points that were deleted.
        /// </summary>
        /// <value>Total number of points that were deleted.</value>
        [DataMember(Name = "points_deleted", EmitDefaultValue = true)]
        public int? PointsDeleted
        {
            get{ return _PointsDeleted;}
            set
            {
                _PointsDeleted = value;
                _flagPointsDeleted = true;
            }
        }
        private int? _PointsDeleted;
        private bool _flagPointsDeleted;

        /// <summary>
        /// Returns false as PointsDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsDeleted()
        {
            return _flagPointsDeleted;
        }
        /// <summary>
        /// Total number of points that were subtracted.
        /// </summary>
        /// <value>Total number of points that were subtracted.</value>
        [DataMember(Name = "points_subtracted", EmitDefaultValue = true)]
        public int? PointsSubtracted
        {
            get{ return _PointsSubtracted;}
            set
            {
                _PointsSubtracted = value;
                _flagPointsSubtracted = true;
            }
        }
        private int? _PointsSubtracted;
        private bool _flagPointsSubtracted;

        /// <summary>
        /// Returns false as PointsSubtracted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsSubtracted()
        {
            return _flagPointsSubtracted;
        }
        /// <summary>
        /// Total number of points that were added. This includes points added manually or automatically by redeeming a reward that adds loyalty points to cards in this campaign.
        /// </summary>
        /// <value>Total number of points that were added. This includes points added manually or automatically by redeeming a reward that adds loyalty points to cards in this campaign.</value>
        [DataMember(Name = "points_added", EmitDefaultValue = true)]
        public int? PointsAdded
        {
            get{ return _PointsAdded;}
            set
            {
                _PointsAdded = value;
                _flagPointsAdded = true;
            }
        }
        private int? _PointsAdded;
        private bool _flagPointsAdded;

        /// <summary>
        /// Returns false as PointsAdded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsAdded()
        {
            return _flagPointsAdded;
        }
        /// <summary>
        /// Total number of points that were rewarded to loyalty cards through earning rules. This includes pending points that were activated.
        /// </summary>
        /// <value>Total number of points that were rewarded to loyalty cards through earning rules. This includes pending points that were activated.</value>
        [DataMember(Name = "points_rewarded", EmitDefaultValue = true)]
        public int? PointsRewarded
        {
            get{ return _PointsRewarded;}
            set
            {
                _PointsRewarded = value;
                _flagPointsRewarded = true;
            }
        }
        private int? _PointsRewarded;
        private bool _flagPointsRewarded;

        /// <summary>
        /// Returns false as PointsRewarded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsRewarded()
        {
            return _flagPointsRewarded;
        }
        /// <summary>
        /// Total number of points that were redeemed for rewards.
        /// </summary>
        /// <value>Total number of points that were redeemed for rewards.</value>
        [DataMember(Name = "points_redeemed", EmitDefaultValue = true)]
        public int? PointsRedeemed
        {
            get{ return _PointsRedeemed;}
            set
            {
                _PointsRedeemed = value;
                _flagPointsRedeemed = true;
            }
        }
        private int? _PointsRedeemed;
        private bool _flagPointsRedeemed;

        /// <summary>
        /// Returns false as PointsRedeemed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsRedeemed()
        {
            return _flagPointsRedeemed;
        }
        /// <summary>
        /// Total number of points that were rolled back for reward redemptions.
        /// </summary>
        /// <value>Total number of points that were rolled back for reward redemptions.</value>
        [DataMember(Name = "points_rolledback", EmitDefaultValue = true)]
        public int? PointsRolledback
        {
            get{ return _PointsRolledback;}
            set
            {
                _PointsRolledback = value;
                _flagPointsRolledback = true;
            }
        }
        private int? _PointsRolledback;
        private bool _flagPointsRolledback;

        /// <summary>
        /// Returns false as PointsRolledback should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsRolledback()
        {
            return _flagPointsRolledback;
        }
        /// <summary>
        /// Total number of points that have expired.
        /// </summary>
        /// <value>Total number of points that have expired.</value>
        [DataMember(Name = "points_expired", EmitDefaultValue = true)]
        public int? PointsExpired
        {
            get{ return _PointsExpired;}
            set
            {
                _PointsExpired = value;
                _flagPointsExpired = true;
            }
        }
        private int? _PointsExpired;
        private bool _flagPointsExpired;

        /// <summary>
        /// Returns false as PointsExpired should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsExpired()
        {
            return _flagPointsExpired;
        }
        /// <summary>
        /// Total number of points transferred out of loyalty cards covered by the campaign.
        /// </summary>
        /// <value>Total number of points transferred out of loyalty cards covered by the campaign.</value>
        [DataMember(Name = "points_transferred_out", EmitDefaultValue = true)]
        public int? PointsTransferredOut
        {
            get{ return _PointsTransferredOut;}
            set
            {
                _PointsTransferredOut = value;
                _flagPointsTransferredOut = true;
            }
        }
        private int? _PointsTransferredOut;
        private bool _flagPointsTransferredOut;

        /// <summary>
        /// Returns false as PointsTransferredOut should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsTransferredOut()
        {
            return _flagPointsTransferredOut;
        }
        /// <summary>
        /// Total number of points transferred into loyalty cards covered by the campaign.
        /// </summary>
        /// <value>Total number of points transferred into loyalty cards covered by the campaign.</value>
        [DataMember(Name = "points_transferred_in", EmitDefaultValue = true)]
        public int? PointsTransferredIn
        {
            get{ return _PointsTransferredIn;}
            set
            {
                _PointsTransferredIn = value;
                _flagPointsTransferredIn = true;
            }
        }
        private int? _PointsTransferredIn;
        private bool _flagPointsTransferredIn;

        /// <summary>
        /// Returns false as PointsTransferredIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsTransferredIn()
        {
            return _flagPointsTransferredIn;
        }
        /// <summary>
        /// Total number of pending points that were added either as part of earning rules or added manually to an existing pending point bucket. Pending points that were activated manually or automatically or that were canceled do not affect this number.
        /// </summary>
        /// <value>Total number of pending points that were added either as part of earning rules or added manually to an existing pending point bucket. Pending points that were activated manually or automatically or that were canceled do not affect this number.</value>
        [DataMember(Name = "pending_points_added", EmitDefaultValue = true)]
        public int? PendingPointsAdded
        {
            get{ return _PendingPointsAdded;}
            set
            {
                _PendingPointsAdded = value;
                _flagPendingPointsAdded = true;
            }
        }
        private int? _PendingPointsAdded;
        private bool _flagPendingPointsAdded;

        /// <summary>
        /// Returns false as PendingPointsAdded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPointsAdded()
        {
            return _flagPendingPointsAdded;
        }
        /// <summary>
        /// Total number of pending points that were subtracted from existing pending point buckets.
        /// </summary>
        /// <value>Total number of pending points that were subtracted from existing pending point buckets.</value>
        [DataMember(Name = "pending_points_subtracted", EmitDefaultValue = true)]
        public int? PendingPointsSubtracted
        {
            get{ return _PendingPointsSubtracted;}
            set
            {
                _PendingPointsSubtracted = value;
                _flagPendingPointsSubtracted = true;
            }
        }
        private int? _PendingPointsSubtracted;
        private bool _flagPendingPointsSubtracted;

        /// <summary>
        /// Returns false as PendingPointsSubtracted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPointsSubtracted()
        {
            return _flagPendingPointsSubtracted;
        }
        /// <summary>
        /// Total number of pending points that were activated manually or automatically.
        /// </summary>
        /// <value>Total number of pending points that were activated manually or automatically.</value>
        [DataMember(Name = "pending_points_activated", EmitDefaultValue = true)]
        public int? PendingPointsActivated
        {
            get{ return _PendingPointsActivated;}
            set
            {
                _PendingPointsActivated = value;
                _flagPendingPointsActivated = true;
            }
        }
        private int? _PendingPointsActivated;
        private bool _flagPendingPointsActivated;

        /// <summary>
        /// Returns false as PendingPointsActivated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPointsActivated()
        {
            return _flagPendingPointsActivated;
        }
        /// <summary>
        /// Total number of pending points that were canceled.
        /// </summary>
        /// <value>Total number of pending points that were canceled.</value>
        [DataMember(Name = "pending_points_canceled", EmitDefaultValue = true)]
        public int? PendingPointsCanceled
        {
            get{ return _PendingPointsCanceled;}
            set
            {
                _PendingPointsCanceled = value;
                _flagPendingPointsCanceled = true;
            }
        }
        private int? _PendingPointsCanceled;
        private bool _flagPendingPointsCanceled;

        /// <summary>
        /// Returns false as PendingPointsCanceled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPointsCanceled()
        {
            return _flagPendingPointsCanceled;
        }
        /// <summary>
        /// Total number of all referred customers.
        /// </summary>
        /// <value>Total number of all referred customers.</value>
        [DataMember(Name = "referred_customers", EmitDefaultValue = true)]
        public int? ReferredCustomers
        {
            get{ return _ReferredCustomers;}
            set
            {
                _ReferredCustomers = value;
                _flagReferredCustomers = true;
            }
        }
        private int? _ReferredCustomers;
        private bool _flagReferredCustomers;

        /// <summary>
        /// Returns false as ReferredCustomers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferredCustomers()
        {
            return _flagReferredCustomers;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignsSummaryGetResponseBody {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  Redemptions: ").Append(Redemptions).Append("\n");
            sb.Append("  RedemptionsSucceeded: ").Append(RedemptionsSucceeded).Append("\n");
            sb.Append("  RedemptionsFailed: ").Append(RedemptionsFailed).Append("\n");
            sb.Append("  Rollbacks: ").Append(Rollbacks).Append("\n");
            sb.Append("  RollbacksSucceeded: ").Append(RollbacksSucceeded).Append("\n");
            sb.Append("  RollbacksFailed: ").Append(RollbacksFailed).Append("\n");
            sb.Append("  Validations: ").Append(Validations).Append("\n");
            sb.Append("  ValidationsSucceeded: ").Append(ValidationsSucceeded).Append("\n");
            sb.Append("  ValidationsFailed: ").Append(ValidationsFailed).Append("\n");
            sb.Append("  OrdersAmount: ").Append(OrdersAmount).Append("\n");
            sb.Append("  OrdersRolledbackAmount: ").Append(OrdersRolledbackAmount).Append("\n");
            sb.Append("  VouchersCreated: ").Append(VouchersCreated).Append("\n");
            sb.Append("  VouchersDeleted: ").Append(VouchersDeleted).Append("\n");
            sb.Append("  Publications: ").Append(Publications).Append("\n");
            sb.Append("  PublicationsSucceeded: ").Append(PublicationsSucceeded).Append("\n");
            sb.Append("  PublicationsFailed: ").Append(PublicationsFailed).Append("\n");
            sb.Append("  DiscountedAmount: ").Append(DiscountedAmount).Append("\n");
            sb.Append("  RolledbackDiscountedAmount: ").Append(RolledbackDiscountedAmount).Append("\n");
            sb.Append("  CreatedVouchersAmount: ").Append(CreatedVouchersAmount).Append("\n");
            sb.Append("  AmountAdded: ").Append(AmountAdded).Append("\n");
            sb.Append("  AmountDeleted: ").Append(AmountDeleted).Append("\n");
            sb.Append("  AmountRedeemed: ").Append(AmountRedeemed).Append("\n");
            sb.Append("  AmountRolledback: ").Append(AmountRolledback).Append("\n");
            sb.Append("  AmountSubtracted: ").Append(AmountSubtracted).Append("\n");
            sb.Append("  CreatedVouchersPoints: ").Append(CreatedVouchersPoints).Append("\n");
            sb.Append("  PointsDeleted: ").Append(PointsDeleted).Append("\n");
            sb.Append("  PointsSubtracted: ").Append(PointsSubtracted).Append("\n");
            sb.Append("  PointsAdded: ").Append(PointsAdded).Append("\n");
            sb.Append("  PointsRewarded: ").Append(PointsRewarded).Append("\n");
            sb.Append("  PointsRedeemed: ").Append(PointsRedeemed).Append("\n");
            sb.Append("  PointsRolledback: ").Append(PointsRolledback).Append("\n");
            sb.Append("  PointsExpired: ").Append(PointsExpired).Append("\n");
            sb.Append("  PointsTransferredOut: ").Append(PointsTransferredOut).Append("\n");
            sb.Append("  PointsTransferredIn: ").Append(PointsTransferredIn).Append("\n");
            sb.Append("  PendingPointsAdded: ").Append(PendingPointsAdded).Append("\n");
            sb.Append("  PendingPointsSubtracted: ").Append(PendingPointsSubtracted).Append("\n");
            sb.Append("  PendingPointsActivated: ").Append(PendingPointsActivated).Append("\n");
            sb.Append("  PendingPointsCanceled: ").Append(PendingPointsCanceled).Append("\n");
            sb.Append("  ReferredCustomers: ").Append(ReferredCustomers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
